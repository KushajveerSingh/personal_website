"use strict";(self.webpackChunkpersonal_website=self.webpackChunkpersonal_website||[]).push([[637],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=u(t),c=a,h=m["".concat(s,".").concat(c)]||m[c]||p[c]||l;return t?r.createElement(h,i(i({ref:n},d),{},{components:t})):r.createElement(h,i({ref:n},d))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=c;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[m]="string"==typeof e?e:a,i[1]=o;for(var u=2;u<l;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},5517:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const l={title:"Problems 1 - 50",sidebar_label:"1 - 50",pagination_label:"Problems 1 - 50",pagination_prev:"algorithms/index",pagination_next:null,toc_min_heading_level:3,toc_max_heading_level:3},i=void 0,o={unversionedId:"algorithms/leetcode/0001_0050",id:"algorithms/leetcode/0001_0050",title:"Problems 1 - 50",description:"1. Two Sum link",source:"@site/notes/algorithms/leetcode/0001_0050.mdx",sourceDirName:"algorithms/leetcode",slug:"/algorithms/leetcode/0001_0050",permalink:"/personal_website/notes/algorithms/leetcode/0001_0050",draft:!1,editUrl:"https://github.com/KushajveerSingh/personal_website/tree/main/notes/algorithms/leetcode/0001_0050.mdx",tags:[],version:"current",frontMatter:{title:"Problems 1 - 50",sidebar_label:"1 - 50",pagination_label:"Problems 1 - 50",pagination_prev:"algorithms/index",pagination_next:null,toc_min_heading_level:3,toc_max_heading_level:3},sidebar:"algorithms",previous:{title:"Algorithms",permalink:"/personal_website/notes/algorithms/"}},s={},u=[{value:"1. Two Sum link",id:"1-two-sum-link",level:3},{value:"2. Add Two Numbers link",id:"2-add-two-numbers-link",level:3}],d={toc:u},m="wrapper";function p(e){let{components:n,...t}=e;return(0,a.kt)(m,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"1-two-sum-link"},"1. Two Sum ",(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/two-sum/description/"},"link")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Problem")),(0,a.kt)("p",null,"Given an array of unsorted integers, return indices of two numbers that add up to target value."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Idea")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time = ",(0,a.kt)("inlineCode",{parentName:"li"},"O(N)"),", Space = ",(0,a.kt)("inlineCode",{parentName:"li"},"O(N)")),(0,a.kt)("li",{parentName:"ul"},"Iterate through the array and store the current value and it's index in a hash map."),(0,a.kt)("li",{parentName:"ul"},'When iterating if you find "target - current_value" in the hash map, return the indices.')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def twoSum(self, nums: List[int], target: int) -> List[int]:\n    # Key = "first_num"\n    # Value = index of "first_num" in "nums"\n    d = {}\n\n    for i in range(len(nums)):\n        first_num = nums[i]\n        second_num = target - first_num\n\n        if second_num in d:\n            first_num_index = i\n            second_num_index = d[second_num]\n            return [first_num_index, second_num_index]\n\n        d[first_num] = i\n')),(0,a.kt)("h3",{id:"2-add-two-numbers-link"},"2. Add Two Numbers ",(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/add-two-numbers/"},"link")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Problem")),(0,a.kt)("p",null,"Given two linked lists represeting two non-negative integers (in reverse order), create a new linked list with the sum of those numbers."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"l1 = 2 -> 4 -> 3 (i.e. the number 342)"),(0,a.kt)("li",{parentName:"ul"},"l2 = 5 -> 6 -> 4 (i.e. the number 465)"),(0,a.kt)("li",{parentName:"ul"},"output = 7 -> 0 -> 8 (i.e. the number 807)")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Idea")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time = ",(0,a.kt)("inlineCode",{parentName:"li"},"O(max(l1.length, l2.length))"),", Space = ",(0,a.kt)("inlineCode",{parentName:"li"},"O(1)")," (only the space for intermediate steps is considered here)"),(0,a.kt)("li",{parentName:"ul"},"Simultaneously iterate through both the lists and add their values."),(0,a.kt)("li",{parentName:"ul"},"Create a new node (in the output list) with the sum of the values (taking carry into account also).")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef addTwoNumbers(self, l1: [ListNode], l2: [ListNode]) -> [ListNode]:\n    # Helper function to avoid code duplication. Can be placed outside\n    # the function also.\n    def add_vals(l1, l2, carry):\n        # val = carry + l1.val + l2.val\n        val = carry\n        if l1 is not None:\n            val += l1.val\n            l1 = l1.next\n        if l2 is not None:\n            val += l2.val\n            l2 = l2.next\n\n        # Handle carry\n        if val >= 10:\n            val = val - 10\n            carry = 1\n        else:\n            carry = 0\n\n        # Return the modified lists, carry, and a new node with the \'val\'\n        return l1, l2, carry, ListNode(val)\n\n\n    # Create "root" node and initialize "head" pointer, as we want to return\n    # "root" as the final answer\n    l1, l2, carry, root = add_vals(l1, l2, 0)\n    head = root\n\n    # Check till l1 is empty, l2 is empty, and carry is 0\n    while (l1 is not None) or (l2 is not None) or (carry != 0):\n        l1, l2, carry, node = add_vals(l1, l2, carry)\n\n        head.next = node\n        head = head.next\n\n    return root\n')))}p.isMDXComponent=!0}}]);